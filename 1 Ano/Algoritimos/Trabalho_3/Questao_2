#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<string.h>

//=======estruturas===================//
//estrutura de nós das filas
typedef struct QNode
{
    struct QNode *next;
    struct QNode *prev;
    short ID, FUEL;
    int time;
}QNode;

//estrutura da cabeça da fila
typedef struct FILA
{
    QNode *tail;
    QNode *head;
    unsigned length;
}FILA;
//======================================//

//========variáveiis globais=========//
FILA pouso[3], dec[3];
unsigned long tempoDec = 0, tempoPou = 0; //tempo total de espera na fila
double avDec = 0, avPou = 0; //quantidade de aviões que já passaram pelas filas
unsigned long fimReserva = 0; //aviões que aterrisaram ao final da reserva de combustível
//===================================//

//=================funções==========================//
//inicia a fila
void initQueue(FILA *F)
{
    F->head = NULL;
    F->tail = NULL;
    F->length = 0;
}

int maior(short a, short b)
{
    return (a>b)?0:1;
}

void printFila(FILA F)
{
	QNode *p = F.tail;
	
    printf("[");
    if(F.length)
    {
        do
        {
            printf("ID: %u || GASOLINA: %u", p->ID, p->FUEL);
            if(p->next != F.tail)
                printf(", ");
            p = p->next;
            
        }while (p != F.tail);
    }
    printf("]");
}

//retorna o indice da menor fila
int menor(int estado)
{
    if(estado == 0) //estado de pouso
    {
        if(pouso[0].length <= pouso[1].length)
            return 0;
        else 
            return 1;   
    }
    else //estado de decolagem
    {
        short menor;
        int ret = 2, i;
        
        menor = dec[2].length;

        for(i=1; i>=0; i--)
        {
            if(menor > dec[i].length)
            {
                menor = dec[i].length;
                ret = i;
            }
        }  
        return ret;
    }
}

//diminui o combustivel dos aviões
void resetaTempo(FILA *F, int estado)
{
    QNode *p = F->tail;
    
    p->time++;
    if(estado == 0)//pouso
    {   
            do
        {
            p->FUEL--;
            p = p->next;
        }while(p != F->tail);
    }
    
}

//retira o avião do começo da fila
void pop(FILA *F, int estado)
{
    QNode *p = F->head;

    if(estado == 1)
    {
        avDec++;
        tempoDec += F->head->time;
    }
    else if(estado == 0)
    {
        avPou++;
        tempoPou += F->head->time;
        if(F->head->FUEL <= 2)
            fimReserva++;
    }

    if(F->head == F->tail)
    {
        free(p);
        F->tail = NULL;
        F->head = NULL;
    }
    else
    {
        p->prev->next = F->tail;
        F->tail->prev = p->prev;
        F->head = p->prev;
        free(p);
    }

    F->length--;
}

//insere na cabeça da fila
void insertHead(FILA *F, QNode *p)
{
    p->prev = F->head;
    p->next = F->tail;
    F->head->next = p;
    F->tail->prev = p;
    F->head = p;

    F->length++;
}

//insere no final da fila
void insertTail(FILA *F, QNode *p)//sempre há no mínimo 1 elemento na fila
{
    if(F->length == 0)
    {
        F->head = p;
        F->tail = p;
        p->next = p;
        p->prev = p;
    }
    else
    {   
        F->tail->prev = p;
        F->head->next = p;
        p->prev = F->head;
        p->next = F->tail;
        F->tail = p;
    }
    
    F->length++;
}

//busca se há um avião em risco na fila
QNode* buscaRisco(FILA *F)
{
    QNode *p = F->tail;
    QNode *risco = NULL;

    do
    {
        if(p->FUEL <= 2)
        {
            if(risco && p->FUEL == 1) //se houver avião com gasolina 1
                return (risco = p);
            else
                risco = p;
        }    
    } while (p != F->tail);

    return risco;
}

//gira até q o avião em risco seja o primeiro
void giraFila(FILA *F, QNode *p)
{
    while(p != F->head)
    {
        F->head = F->head->prev;
        F->tail = F->tail->prev;
    }   
}

//decide a fila qual será inserido
void defineFila(QNode *p, short estado)
{
    if(estado == 0) //estado de pouso
    {
        if(p->FUEL == 1) //caso a gasolina seja 1
        {
            if(pouso[2].length) //caso já tenha alguem na fila 3(emergencia)
                insertTail(&pouso[menor(0)], p);
            else
                insertTail(&pouso[2], p);
        }
        else
            insertTail(&pouso[menor(estado)], p);    
    }
    else //estado de decolagem 
        insertTail(&dec[menor(1)], p);
       
}

//Organiza as decolagens e aterrisagens
void reorganiza()
{
    short i, pista[3]; //sinalizar se a pista está ou não ocupada
    memset(pista, 0, sizeof(short)*3); //reseta todas as pistas com livre (0)
    QNode *risco = NULL;

    for(i=0; i<3; i++) //identifica se há algum caso de risco 
        if(pouso[i].length)
        {
            risco = buscaRisco(&pouso[i]);
            if(risco)
            {
                giraFila(&pouso[i], risco);
                pop(&pouso[i], 0);
                pista[i] = 1;
            }   
        }   
    
    for(i=0; i<3; i++) //para casos fora os de risco
    {
        if(pouso[i].length && pista[i] == 0 && pouso[i].length >= dec[i].length) //verifica se há aviões na fila e se os aviões 
        {    
            pop(&pouso[i], 0);
            pista[i] = 1;
        }
        else if(dec[i].length && pista[i] == 0)
        {
            pop(&dec[i], 1);
            pista[i] = 1;
        }   
    }
    
    for(i=0; i<3; i++)
    {    
        if(pouso[i].length) //se tiver algo na fila
            resetaTempo(&pouso[i], 0); //diminui o combustivel dos aviões na fila de pouso e aumenta o tempo do avião na fila
        if(dec[i].length)
            resetaTempo(&dec[i], 1);//aumenta o tempo do avião na fila
    }
    if(dec[2].length == 0) //caso a pista 3 de decolagem esteja vazia, passa o avião para a pista preferencial de decolagem
    {
        int max = maior(dec[0].length, dec[1].length);

        if(dec[max].length && dec[2].length == 0)
        {
            dec[2].head = dec[max].head;
            dec[2].tail = dec[max].head;
            if(dec[max].length > 1)
            {
                dec[max].head->next->prev = dec[max].head->prev;
                dec[max].head->prev->next = dec[max].tail;
                dec[max].head = dec[max].head->prev;
                dec[2].head->next = dec[2].head;
                dec[2].head->prev = dec[2].head;
            }
            else
            {
                dec[max].head = NULL;
                dec[max].tail = NULL;
            }
            dec[2].length++;
            dec[max].length--;
        }   
    }
}

int buscaQuedas()
{
    int i, quedas = 0;
    QNode *p;

    for(i=0; i<3; i++)
    {
        if(pouso[i].length)
        {
            p = pouso[i].tail;
            do
            {
                if(p->FUEL == 1)
                    quedas++;
                p = p->next;
            } while (p != pouso[i].tail);
        }
    }
    return quedas;
}

void printQuedas()
{
    int i;
    QNode *p;

    for(i=0; i<3; i++)
    {
        if(pouso[i].length)
        {
            p = pouso[i].tail;
            do
            {
                if(p->FUEL == 1)
                    printf("[ID: %hd]\n", p->ID);

                p = p->next;
            } while (p != pouso[i].tail);
            
        }
    }
}
//======================================================================//

int main()
{
    int i, j, k, qnt, fon, quedas;
    QNode *p;
    unsigned id = 1;
    double medPouso = 0, medDec = 0;
    unsigned long tempo = 1;

    //inicia as filas de pouso e de decolagem 
    for(i=0; i<3; i++)
    {
        initQueue(&pouso[i]);
        initQueue(&dec[i]);
    }
    
    srand(time(NULL));

    while(scanf("%d", &fon) && fon)
    {
        fimReserva = 0;
        for(i=0; i<2; i++) //caso 0: gera aviões de pouso // caso 1: gera aviões de decolagem
        { 
            qnt = rand() % 4; //quantidade de aviões para decolagem/pouso

            if(i==0)
                printf("Avioes Gerados para pouso: %d\n", qnt);
            else
                printf("Avioes Gerados para decolagem: %d\n", qnt);
            
            for(j=0; j<qnt; j++)
            {
                //gera os aviões
                p = (QNode*)malloc(sizeof(QNode));               
                p->ID = id++;
                p->FUEL = (rand()%20) + 1;
                p->time = 0;

                defineFila(p, i); 
            }
        }   

        printf("\n");

        printf("\tANTES DO TEMPO %lu\n\n", tempo);

        printf("\tFILA AVIOES PARA POUSO\n\n");
        for(k=0; k<3; k++)
        {
            if(k+1 == 3)
                printf("Fila de Emergencia (para avioes com 1 de gasolina)\n");
            else
                printf("Fila %d\n", k+1);
            printf("Quantidade de Avioes na fila: %u\n", pouso[k].length);
            printFila(pouso[k]);
            printf("\n\n");
        }

        printf("\tFILA DE AVIOES PARA DECOLAGEM\n");
        for(k=0; k<3; k++)
        {
            printf("Fila %d\n", k+1);
            printf("Quantidade de avioes na fila %d: %u\n", dec[k].length);
            printFila(dec[k]);
            printf("\n\n");
        }
    
        //reorganiza as filas, com pousos e decolagens
        reorganiza();
        //calcula os tempos médios de pouso e de decolagem
        if(avDec)
            medDec = (tempoDec / avDec); //acumulado do tempo total de espera/quantidade de aviões que já decolaram
        if(avPou)
            medPouso = (tempoPou / avPou);  //acumulado do tempo total de espera/quantidade de aviões que já decolaram

        printf("\n");

        printf("\tAPOS O TEMPO %lu\n\n", tempo++);

        printf("\tFILA AVIOES PARA POUSO\n\n");
        for(k=0; k<3; k++)
        {
            if(k+1 == 3)
                printf("Fila de Emergencia (para avioes com 1 de gasolina)\n");
            else
                printf("Fila %d\n", k+1);
            printf("Quantidade de Avioes na fila: %u\n", pouso[k].length);
            printFila(pouso[k]);
            printf("\n\n");
        }

        printf("\tFILA DE AVIOES PARA DECOLAGEM\n");
        for(k=0; k<3; k++)
        {
            printf("Fila %d\n", k+1);
            printf("Quantidade de avioes na fila %d: %u\n", dec[k].length);
            printFila(dec[k]);
            printf("\n\n");
        }

        printf("\n");
        printf("\tTempo medio de espera para decolagem: %.4lf\n", medDec);
        printf("\tTempo medio de espera para pouso: %.4lf\n", medPouso);
        printf("\tAvioes que aterrisaram ao final da reserva de combustivel(menos de 3 unidades): %lu\n", fimReserva);
        quedas = buscaQuedas();
        printf("\tAvioes em situacao critica: %d\n", quedas);
        if(quedas)
            printQuedas();
            
    }   

    return 0;
}
